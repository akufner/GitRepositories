Beginner
1) data.frame, class(mtcars)
2) is(precip, "vector")
TRUE # so yes it is
3) > trees.matrix<- data.matrix(trees, rownames.force = NA)
4. Atlanta
5) > MyList<-list(mtcars, trees, precip)
6) Yes, class(precip)
7) mtcars[2,7]
mtcars["Mazda RX4 Wag", 7]
mtcars["Mazda RX4 Wag", "qsec"]
mtcars["Mazda RX4 Wag',] [7]
8) > precip["Juneau"]<-23
> precip["Phoenix"]<- 46
> precip["Sacramento"]<- 12
9) > any(trees[, "Girth"]>trees[,"Volume"])
[1] FALSE
10) A=2356, B=385.54, C=242.1    C/B + A = 2356.628

Intermediate

Section 1
1) If REPLACE=TRUE then it will return sampled values back to the pool of data.  If REPLACE=FALSE then it will not return sampled values back to the data pool.
2) MyMatrix*1
3) > apply(MyMatrix, 1, all)
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

Section 2
1) 16
2) > apply(MyMatrix, 2, sum)
3) > apply(MyMatrix, 2, prod)
4) > MyMatrix[which(MyMatrix == 10)]<-12
5) 33
6) > MyFrame<-data.frame(MyMatrix)
> MyFrame[,12]<-as(MyFrame[,12], "character")
7) > Sums<-apply(MyMatrix, 1, sum)
> Sums>70
[1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
> NewMatrix<-matrix(NA, nrow=8, ncol=13)
> NewFrame<-data.frame(NewMatrix)
> NewFrame[,1:12]<-MyMatrix
> NewFrame[,13]<-Sums>70
> NewFrame
  X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12   X13
1  8  4  7  9  3  2  8  2  9   2   3   5 FALSE
2  8  6  8 10  5 10  7  9  1  10   8  10  TRUE
3  1  6  1  6  9  5  5  1  8   4  10   1 FALSE
4  7  1  5 10  2  2  3  7  7   2   9  10 FALSE
5  9  6  7  5  9  9  7  1  4   3  10   2  TRUE
6  1  2  9  9  2 10  8 10 10   4   7   3  TRUE
7  9  9  1  2 10  6  6  9  7  10   8   8  TRUE
8  8  3  7  7  7 10  7  7  7   7   4   3  TRUE

Advanced
1) > Greetings<-function(Message)  {print(Message)}
> Greetings("Hello, World.")
[1] "Hello, World."
2) > IrisFunction<-function(iris) {
+   Setosa<-iris[which(iris[,"Species"]=="setosa"),]
+   Virginica<-iris[which(iris[,"Species"]=="virginica"),]
+   Versicolor<-iris[which(iris[,"Species"]=="versicolor"),]
+   return(list(Setosa,Virginica,Versicolor))
+   }
3) > IrisFunction<-function(iris) {
+   AnswerVector<-array(NA,dim=dim(iris)[[1]])
+   for (index in 1:dim(iris)[[1]]) {    if (iris[index,"Sepal.Width"]>3.1) {
+       AnswerVector[index]<-iris[index,"Petal.Length"]+iris[index,"Sepal.Length"]
+        }
+     else if (iris[index,"Sepal.Width"]<3.1) {
+       AnswerVector[index]<-iris[index,"Sepal.Length"]-iris[index,"Petal.Length"]
+       }
+     }
+   return(AnswerVector)
+   }
> IrisFunction(iris)
  [1]  6.5  3.5  6.0   NA  6.4  7.1  6.0  6.5  3.0   NA  6.9  6.4  3.4  3.2  7.0  7.2  6.7  6.5  7.4
 [20]  6.6  7.1  6.6  5.6  6.8  6.7  3.4  6.6  6.7  6.6  6.3   NA  6.9  6.7  6.9   NA  6.2  6.8  6.3
 [39]  3.1  6.6  6.3  3.2  5.7  6.6  7.0  3.4  6.7  6.0  6.8  6.4 11.7 10.9   NA  1.5  1.9  1.2 11.0
 [58]  1.6  2.0  1.3  1.5  1.7  2.0  1.4  2.0   NA  1.1  1.7  1.7  1.7 10.7  2.1  1.4  1.4  2.1  2.2
 [77]  2.0  1.7  1.5  2.2  1.7  1.8  1.9  0.9  0.9 10.5   NA  1.9  1.5  1.5  1.1  1.5  1.8  1.7  1.4
 [96]  1.5  1.5  1.9  2.1  1.6 12.3  0.7  1.2  0.7  0.7  1.0  0.4  1.0  0.9 13.3 11.6  1.1  1.3  0.7
[115]  0.7 11.7  1.0 14.4  0.8  1.0 12.6  0.7  1.0  1.4 12.4 13.2  1.4  1.2  0.8  1.4  1.3 14.3  0.8
[134]  1.2  0.5  1.6 11.9   NA  1.2   NA   NA   NA  0.7 12.7 12.4  1.5  1.3  1.3 11.6  0.8

4) > findMPG<-function(NumCylinders) {
  CylinderSubset<-mtcars[which(mtcars[,"cyl"]==NumCylinders),]
  Answer<-mean(CylinderSubset[,"mpg"])
  return(Answer)
  }
5) > PowerballDraw<-function(NumDrawings) {
 DrawsMatrix<-matrix(NA,nrow=NumDrawings,ncol=6)
  for (draw in 1:NumDrawings) {
    DrawsMatrix[draw,1:5]<-sample(c(1:69),5,replace=FALSE)
    DrawsMatrix[draw,6]<-sample(c(1:26),1,replace=FALSE)
    }
  return(DrawsMatrix)
  }
  > PowerballDraw(1000000)
  6) > PowerballDraw<-function(MyNumbers) {
    DrawsMatrix<-matrix(NA,nrow=1000000,ncol=6)
    for (draw in 1:1000000) {
    DrawsMatrix[draw,1:5]<-sample(c(1:69),5,replace=FALSE)
    DrawsMatrix[draw,6]<-sample(c(1:26),1,replace=FALSE)
    }
  TestForMatch<-array(NA,dim=1000000)
  for (test in 1:1000000) {
    TestForMatch[test]<-all(DrawsMatrix[test,]==MyNumbers)
    }
  Result<-any(TestForMatch)
  return(Result)
  }
  > MyNumbers<-c(21,5,13,54,43,16)
  > PowerballDraw(MyNumbers)
[1] FALSE    :(

Expert
1) mean = 34.91571, median = 36.6, sd = 13.33442.
2) hist() The data in precip is continuous.
3) RandomNormal<-rnorm(length(precip),mean(precip),sd(precip))
4) > comparePrecip<-function(precip,RandomNormal,Iterations=100) {
+         MeanDifference<-mean(precip)-mean(RandomNormal)
+     Barrel<-c(precip,RandomNormal)
+     ReplicatedMeans<-array(data=NA,dim=Iterations)
+     for (Counter in 1:Iterations) {
+         NewPrecip<-sample(Barrel,length(precip),replace=TRUE)
+         NewRandomNormal<-sample(Barrel,length(RandomNormal),replace=TRUE)
+         PrecipMean<-mean(NewPrecip)
+         RandomMean<-mean(NewRandomNormal)
+         ReplicatedMeans[Counter]<-RandomMean-PrecipMean
+         }
+     Percentage<-length(which(ReplicatedMeans>MeanDifference))/Iterations
+     return(Percentage)
+     }
> comparePrecip(precip, RandomNormal, Iterations=100)
[1] 0.43
5) The straight density plots look very similar.  The histograms howver look somewhat different.  The peaks don't quite match up perfectly.  The function seems to indicate that the datasets are not identical.
